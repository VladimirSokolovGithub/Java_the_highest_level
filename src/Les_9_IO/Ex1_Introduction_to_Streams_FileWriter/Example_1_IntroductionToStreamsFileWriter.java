package Les_9_IO.Ex1_Introduction_to_Streams_FileWriter;

//В этом уроке рассмотрим Character Streams и Byte Streams. Сразу стоит отметить что это не имеет никакого
// отношения к интерфейсу Stream.

//Stream (поток) для работы с файлами, это упорядоченная последовательность данных.

//В java разделяют стримы, которые работают с байтами и которые работают с символами, буквами, цифрами и т.д.
//Файлы разделяют читабельными для человека - текстовые файлы и не читаемые для человека - binary files.

//В пакете Java.IO (IO - input output) существуют классы для работы с обоими типами таких файлов.

//При работе с текстовыми и бинарными файлами нам необходимо использовать разные типы стримов.

//Начнем рассмотрение со стримов которые используются для текстовых файлов - это
// FileReader and FileWriter

//В наш объект FileWriter writer; мы помещаем наш файл, указывая абсолютный путь к нему в параметре конструктора new FileWriter().
//Далее в loop-е мы будем вызывать метод FileWriter - write(rubai.charAt(i)), передав ему в параметры наш rubai,
// который, с помощью метода charAt(i), посимвольно будет считывать наш текст и записывать в наш файл. Файл так же можно
// не создавать заранее, тогда он создастся сам. Так же мы можем не писать абсолютный путь к файлу, а написать просто
// название файла (относительный путь - относительно корня нашего проекта) и тогда он будет создан в корне нашего пооекта.

import java.io.FileWriter;
import java.io.IOException;

public class Example_1_IntroductionToStreamsFileWriter {
    public static void main(String[] args) throws IOException {
        String rubai = "Много лет размышлял я над жизнью земной.\n" +
                "Непонятного нет для меня под луной.\n" +
                "Мне известно, что мне ничего не известно, —\n" +
                "Вот последний секрет из постигнутых мной.\n";

        String s = "\nHello";

        FileWriter writer = null; //Такой вариант создания writer-а необходим, что бы его было видно в блоке finally
        try {
            writer = new FileWriter("C:\\Users\\Dell\\IdeaProjects\\Java_the_highest_level\\src\\Les_9_IO_And_NIO" +
                    "\\Ex1_Introduction_to_Streams_FileWriter\\text1.txt", true);
//            for (int i = 0; i < rubai.length(); i++){
//                writer.write(rubai.charAt(i)); //здесь метод write принимает int, а мы вставляем char.
//                                               //Но внутри будет происходить автоматический кастинг до int.
//            }

            //Так же с помощью метода write() можно записать весь текст полностью, передав ему в параметр объект
            // rubai, то есть весь String целиком. Использовать это в нашем случае удобнее, но следует учитывать,
            //что здесь так же текст будет передаваться посимвольно. Всё это конечно не очень эффективно, поэтомы
            //вскоре мы рассмотрим более эффективный вариант.

//            writer.write(rubai);

            //Теперь допустим что мы хотим дописать в наш файл, который уже содержит наш rubai - слово Hello.
            //Произойдёт перезапись файла и в нём будет только новое слово Hello, а весь предыдущий текст
            // будет удалён.
            writer.write(s);

            //Если мы хотим что бы слово Hello добавилось после нашего rubai, то нам нужно в конструктор нашего
            //FileWriter вторым параметром добавить ""append: true" - если значение true, тогда новый текст будет
            // добавлен в конец нашего файла не затирая предыдущий текст.

            System.out.println("Done!");
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            writer.close(); //Так же наши стримы всегда нужно закрывать после завершения работы методом close()
                            // и желательно это делать в блоке finally. Если стрим не закрыть, то в файл ничего
                            //не запишется.
                            //На самом деле стримы можно не закрывать, но для этого нужно использовать другую
                            //технику, которую рассмотрим через один урок.
        }
    }
}



//IOException - который может выброситься при работе со стримами, это суперкласс для исключений которые выбрасываются
//при работе с файлами.

//Так же стоит отметить, что объекты FileWriter и FileReader в конструктор могут принимать не String, а сам объект
//класса File.

