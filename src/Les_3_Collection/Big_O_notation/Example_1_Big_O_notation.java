package Les_3_Collection.Big_O_notation;

public class Example_1_Big_O_notation {
    public static void main(String[] args) {
        //Big_O_notation - обозначение для описания сложности алгоритмов.
        //т.е. за какое время выполняются те или иные алгоритмы
        //Самые распространенные O(1); O(n) и O(log n)

        //Корректнее описывать сложность алгоритмов через количество операций выполняемых для достижения результата
        //Если рассматривать Коллекции, то можно понимать сколько времени нам понадобиться на поиск элемента и т.д.

        // O(1) - алгоритм выполняется за постоянное константное время (сложность порядка 1) - это самый
        //быстрый алгоритм.
        //Вне зависимости от количества элементов в Коллекции, алгоритм (метод get() например) будет работать
        //одно и то же время т.е. проделает одинаковое количество операций.

        // O(n) - это сложность порядка n. Или ещё называю линейный алгоритм (выполняется за линейное время).
        // O(n) означает, что чем больше становится элементов в нашей коллекции, тем больше шагов(времени)
        //нам необходимо, чтобы выполнить то или иное действие. Количество операций линейно зависит от количества
        //элементов.

        // O(log n) - это логарифмическая сложность. По количеству шагов она хуже, чем O(1), но лучше чем O(n)
        // O(log n) - используется например в бинарном поиске.

    }
}
